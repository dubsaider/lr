import os
import cv2
import pytest

from medical_doc_processor.core.orientation_detector import OrientationDetector
from medical_doc_processor.core.square_detector import SquareDetector
from medical_doc_processor.core.image_loader import load_image

class TestOrientationDetection:
    """–¢–µ—Å—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
    
    def setup_method(self):
        self.orientation_detector = OrientationDetector()
        self.square_detector = SquareDetector()
        self.test_images_dir = 'tests/generated'
    
    def test_original_orientation(self):
        """–¢–µ—Å—Ç –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        image_path = os.path.join(self.test_images_dir, 'original.jpg')
        image = load_image(image_path)
        squares = self.square_detector.find_black_squares(image)
        orientation = self.orientation_detector.detect_orientation_by_lines(squares, image.shape)
        
        print(f"üìÑ original.jpg: {len(squares)} –∫–≤–∞–¥—Ä–∞—Ç–æ–≤, –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è {orientation}¬∞")
        assert orientation in [0, 90, 180, 270]
    
    def test_90_degrees_rotation(self):
        """–¢–µ—Å—Ç –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ –Ω–∞ 90¬∞"""
        image_path = os.path.join(self.test_images_dir, 'rotated_90.jpg')
        image = load_image(image_path)
        squares = self.square_detector.find_black_squares(image)
        orientation = self.orientation_detector.detect_orientation_by_lines(squares, image.shape)
        
        print(f"üìÑ rotated_90.jpg: {len(squares)} –∫–≤–∞–¥—Ä–∞—Ç–æ–≤, –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è {orientation}¬∞")
        assert orientation in [0, 90, 180, 270]
    
    def test_180_degrees_rotation(self):
        """–¢–µ—Å—Ç –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ –Ω–∞ 180¬∞"""
        image_path = os.path.join(self.test_images_dir, 'rotated_180.jpg')
        image = load_image(image_path)
        squares = self.square_detector.find_black_squares(image)
        orientation = self.orientation_detector.detect_orientation_by_lines(squares, image.shape)
        
        print(f"üìÑ rotated_180.jpg: {len(squares)} –∫–≤–∞–¥—Ä–∞—Ç–æ–≤, –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è {orientation}¬∞")
        assert orientation in [0, 90, 180, 270]
    
    def test_270_degrees_rotation(self):
        """–¢–µ—Å—Ç –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ –Ω–∞ 270¬∞"""
        image_path = os.path.join(self.test_images_dir, 'rotated_270.jpg')
        image = load_image(image_path)
        squares = self.square_detector.find_black_squares(image)
        orientation = self.orientation_detector.detect_orientation_by_lines(squares, image.shape)
        
        print(f"üìÑ rotated_270.jpg: {len(squares)} –∫–≤–∞–¥—Ä–∞—Ç–æ–≤, –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è {orientation}¬∞")
        assert orientation in [0, 90, 180, 270]
    
    def test_consistent_square_detection(self):
        """–¢–µ—Å—Ç —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤–æ –≤—Å–µ—Ö –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è—Ö"""
        orientations = ['original.jpg', 'rotated_90.jpg', 'rotated_180.jpg', 'rotated_270.jpg']
        square_counts = []
        
        for filename in orientations:
            image_path = os.path.join(self.test_images_dir, filename)
            image = load_image(image_path)
            squares = self.square_detector.find_black_squares(image)
            square_counts.append(len(squares))
        
        # –î–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Ä–∞–∑–Ω–∏—Ü—É –∏–∑-–∑–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø–æ–≤–æ—Ä–æ—Ç–∞
        max_count = max(square_counts)
        min_count = min(square_counts)
        assert max_count - min_count <= 2, f"–°–∏–ª—å–Ω–æ —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤: {square_counts}"
        
        print(f"‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–æ–≤: {square_counts}")

def test_source_file_exists():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    assert os.path.exists('tests/data/document.jpg'), "–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª tests/data/document.jpg –Ω–µ –Ω–∞–π–¥–µ–Ω"

def test_generated_images_exist():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
    generated_dir = 'tests/generated'
    expected_files = ['original.jpg', 'rotated_90.jpg', 'rotated_180.jpg', 'rotated_270.jpg']
    
    for filename in expected_files:
        path = os.path.join(generated_dir, filename)
        assert os.path.exists(path), f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}"