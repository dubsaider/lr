#!/usr/bin/env python3
"""CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Medical Document Processor."""

import os
import click
from typing import List

from .core.region_extractor import RegionExtractor
from .utils.visualization import Visualization
from .utils.file_utils import FileUtils
from .core.image_loader import ImageLoader


@click.group()
@click.version_option()
def main():
    """Medical Document Processor - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–µ–π –∏–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."""
    pass


@main.command()
@click.argument('input_path', type=click.Path(exists=True))
@click.option('--output-dir', '-o', default='output', 
              help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
@click.option('--debug', '-d', is_flag=True, help='–°–æ–∑–¥–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
def process(input_path: str, output_dir: str, debug: bool):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª."""
    try:
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if debug:
            visualizer = Visualization()
            visualizer.debug_lines(input_path, output_dir)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        extractor = RegionExtractor(output_dir)
        rotation_angle, results = extractor.process_medical_test(input_path)
        
        click.echo(click.style(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", fg='green'))
        click.echo(f"–£–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞: {rotation_angle}¬∞")
        click.echo(f"L –æ–±–ª–∞—Å—Ç—å: {'‚úÖ' if results['L_region'] is not None else '‚ùå'}")
        click.echo(f"R –æ–±–ª–∞—Å—Ç—å: {'‚úÖ' if results['R_region'] is not None else '‚ùå'}")
        
    except Exception as e:
        click.echo(click.style(f"‚ùå –û—à–∏–±–∫–∞: {e}", fg='red'))


@main.command()
@click.argument('input_dir', type=click.Path(exists=True))
@click.option('--output-dir', '-o', default='output', 
              help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
@click.option('--recursive', '-r', is_flag=True, help='–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤')
@click.option('--debug', '-d', is_flag=True, help='–°–æ–∑–¥–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
def batch(input_dir: str, output_dir: str, recursive: bool, debug: bool):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
    # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã
    files = FileUtils.find_supported_files(input_dir, recursive)
    
    if not files:
        click.echo(click.style("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤", fg='yellow'))
        return
    
    click.echo(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    success_count = 0
    extractor = RegionExtractor(output_dir)
    visualizer = Visualization()
    
    for file_path in files:
        try:
            click.echo(f"\nüìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: {os.path.basename(file_path)}")
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if debug:
                visualizer.debug_lines(file_path, output_dir)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
            rotation_angle, results = extractor.process_medical_test(file_path)
            
            click.echo(click.style(f"‚úÖ –£—Å–ø–µ—à–Ω–æ - —É–≥–æ–ª: {rotation_angle}¬∞", fg='green'))
            success_count += 1
            
        except Exception as e:
            click.echo(click.style(f"‚ùå –û—à–∏–±–∫–∞: {e}", fg='red'))
    
    click.echo(f"\nüìä –ò—Ç–æ–≥–∏: {success_count}/{len(files)} —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")


@main.command()
@click.argument('input_path', type=click.Path(exists=True))
@click.option('--output-dir', '-o', default='output', 
              help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
def debug(input_path: str, output_dir: str):
    """–°–æ–∑–¥–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ª–∏–Ω–∏—è–º–∏ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤."""
    try:
        visualizer = Visualization()
        line_info = visualizer.debug_lines(input_path, output_dir)
        
        click.echo(click.style("‚úÖ –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ", fg='green'))
        for y, count in line_info.items():
            click.echo(f"–õ–∏–Ω–∏—è y={y}: {count} –∫–≤–∞–¥—Ä–∞—Ç–æ–≤")
            
    except Exception as e:
        click.echo(click.style(f"‚ùå –û—à–∏–±–∫–∞: {e}", fg='red'))


@main.command()
def info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö."""
    image_loader = ImageLoader()
    formats = image_loader.get_supported_formats()
    
    click.echo("üìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:")
    click.echo(f"üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {', '.join(formats['images'])}")
    if formats['pdf']:
        click.echo(f"üìÑ PDF: {', '.join(formats['pdf'])}")
    else:
        click.echo("üìÑ PDF: ‚ùå (—Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ PyMuPDF)")


@main.command()
@click.argument('input_path', type=click.Path(exists=True))
def validate(input_path: str):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
    error = FileUtils.validate_file_path(input_path)
    
    if error:
        click.echo(click.style(f"‚ùå {error}", fg='red'))
    else:
        file_info = FileUtils.get_file_info(input_path)
        click.echo(click.style("‚úÖ –§–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω", fg='green'))
        click.echo(f"–ò–º—è: {file_info['name']}")
        click.echo(f"–†–∞–∑–º–µ—Ä: {file_info['size_mb']} MB")
        click.echo(f"–§–æ—Ä–º–∞—Ç: {file_info['extension']}")


if __name__ == '__main__':
    main()